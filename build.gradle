buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url = 'https://impactdevelopment.github.io/maven/' }
        maven { url = "https://jitpack.io" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.4"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.1.0'
group = 'me.eliteun17y.unity' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'unity'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.


minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'stable', version: '39-1.12'
    //makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'
            property 'fml.coreMods.load', mod_core_plugin.replace('${mod_group}', mod_group).replace('${mod_id}', mod_id)
        }

        server {
            property 'fml.coreMods.load', mod_core_plugin.replace('${mod_group}', mod_group).replace('${mod_id}', mod_id)
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    compile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'commons-io'
        exclude module: 'gson'
        exclude module: 'guava'
        exclude module: 'launchwrapper'
        exclude module: 'log4j-core'
    }

    annotationProcessor('org.spongepowered:mixin:0.8.2:processor') {
        exclude module: 'gson'
    }
}

repositories {
    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven { url = 'https://files.minecraftforge.net/maven' }
    maven { url = 'https://impactdevelopment.github.io/maven/' }
    maven { url = "https://jitpack.io" }
}

shadowJar {
    dependencies {
        include(dependency('org.spongepowered:mixin'))
    }
    exclude 'LICENSE.txt'
    classifier = 'release'
}

mixin {
    add sourceSets.main, "mixins.unity.refmap.json"
}

// It doesn't obfuscate without this
reobf {
    shadowJar {
        classpath = sourceSets.main.compileClasspath
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest.attributes(
            'Manifest-Version': 1.0,
            'MixinConfigs': 'mixins.unity.json',
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'TweakOrder': 0,
            'FMLCorePluginContainsFMLMod': 'true',
            'FMLCorePlugin': 'me.eliteun17y.unity.mixin.ClientMixinLoader',
            'ForceLoadAsMod': 'true'
    )
}

sourceSets { main { output.resourcesDir = output.getClassesDirs()[0] } }

build.dependsOn(shadowJar)